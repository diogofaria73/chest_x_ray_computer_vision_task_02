import streamlit as st
import os
import numpy as np
from PIL import Image
from src.model import create_model, preprocess_image
from src.utils import load_and_prepare_data, StreamlitCallback
from src.validation import validate_xray_image

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Classificador de Pneumonia - PUC Minas",
    page_icon="ü´Å",
    layout="wide"
)

# T√≠tulo principal
st.title("Classificador de Pneumonia em Raios-X")
st.markdown("---")

# Sidebar para navega√ß√£o
page = st.sidebar.selectbox(
    "Selecione uma p√°gina",
    ["Treinar Modelo", "Classificar Imagem"]
)

# Fun√ß√£o para salvar imagem tempor√°ria
def save_uploaded_file(uploaded_file):
    try:
        with open(os.path.join("temp.jpg"), "wb") as f:
            f.write(uploaded_file.getbuffer())
        return True
    except:
        return False

if page == "Treinar Modelo":
    st.header("Treinamento do Modelo")
    
    # Par√¢metros de treinamento com explica√ß√µes
    col1, col2 = st.columns(2)
    with col1:
        epochs = st.number_input(
            "N√∫mero de √©pocas",
            min_value=1,
            value=10,
            help="Uma √©poca representa uma passagem completa pelos dados de treinamento. "
                 "Mais √©pocas permitem que o modelo aprenda mais, mas podem causar overfitting se forem muitas."
        )
        batch_size = st.number_input(
            "Tamanho do batch",
            min_value=1,
            value=32,
            help="N√∫mero de imagens processadas antes de atualizar o modelo. "
                 "Batches maiores s√£o mais eficientes mas consomem mais mem√≥ria. "
                 "Valores comuns s√£o 16, 32, 64."
        )
    
    with col2:
        validation_split = st.slider(
            "Divis√£o de valida√ß√£o",
            0.1,
            0.3,
            0.2,
            help="Porcentagem dos dados usada para valida√ß√£o durante o treinamento. "
                 "Ajuda a monitorar se o modelo est√° generalizando bem ou tendo overfitting."
        )
        
    if st.button("Iniciar Treinamento"):
        try:
            # Verificar se existem imagens para treinamento
            if not os.path.exists('data/train/NORMAL') or not os.path.exists('data/train/PNEUMONIA'):
                st.error("Dataset n√£o encontrado. Execute 'make download-dataset' primeiro.")
                st.stop()
            
            # Carregar e preparar dados
            train_generator, val_generator, test_generator = load_and_prepare_data(
                'data',
                batch_size=batch_size
            )
            
            # Criar modelo
            model = create_model()
            
            # Criar callback do Streamlit
            streamlit_callback = StreamlitCallback(epochs)
            
            # Treinar modelo
            history = model.fit(
                train_generator,
                epochs=epochs,
                validation_data=val_generator,
                callbacks=[streamlit_callback]
            )
            
            # Salvar o modelo
            model.save('modelo_treinado.keras')
            
        except Exception as e:
            st.error(f"Erro durante o treinamento: {str(e)}")

elif page == "Classificar Imagem":
    st.header("Classifica√ß√£o de Imagens")
    
    uploaded_file = st.file_uploader("Escolha uma imagem de raio-x", type=['jpg', 'jpeg', 'png'])
    
    if uploaded_file is not None:
        # Exibir imagem
        image = Image.open(uploaded_file)
        st.image(image, caption='Imagem carregada', use_container_width=True)
        
        # Validar se √© uma imagem de raio-X
        is_valid, error_message = validate_xray_image(image)
        
        if not is_valid:
            st.error(f"Imagem inv√°lida: {error_message}")
            st.warning("Por favor, certifique-se de enviar uma imagem de raio-X v√°lida.")
            st.stop()
        
        # Verificar se existe um modelo treinado
        if os.path.exists('modelo_treinado.keras'):
            if st.button("Classificar"):
                with st.spinner("Classificando..."):
                    # Salvar e preprocessar imagem
                    save_uploaded_file(uploaded_file)
                    img_array = preprocess_image("temp.jpg")
                    
                    # Carregar modelo e fazer predi√ß√£o
                    model = create_model()
                    model.load_weights('modelo_treinado.keras')
                    prediction = model.predict(img_array)
                    
                    # Exibir resultado
                    resultado = "PNEUMONIA" if prediction[0][0] > 0.5 else "NORMAL"
                    confianca = prediction[0][0] if prediction[0][0] > 0.5 else 1 - prediction[0][0]
                    
                    # Criar colunas para resultado e confian√ßa
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.success(f"Classifica√ß√£o: {resultado}")
                    
                    with col2:
                        st.info(f"Confian√ßa: {confianca:.2%}")
                    
                    # Remover arquivo tempor√°rio
                    if os.path.exists("temp.jpg"):
                        os.remove("temp.jpg")
        else:
            st.warning("Nenhum modelo treinado encontrado. Por favor, treine o modelo primeiro.")

# Adicionar informa√ß√µes no rodap√©
st.markdown("---")
st.markdown("Desenvolvido para classifica√ß√£o de imagens de raio-x pulmonar") 